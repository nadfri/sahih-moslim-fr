const { execSync } = require("child_process");
const fs = require("fs");
const path = require("path");

console.log("üöÄ Script de restauration d'urgence pour Supabase");
console.log("================================================\n");

// Chemin du fichier de sauvegarde - utiliser le plus r√©cent
const backupDir = path.join(__dirname);
const dumpFiles = fs
  .readdirSync(backupDir)
  .filter((file) => file.endsWith(".dump"));

if (dumpFiles.length === 0) {
  console.error("‚ùå Aucun fichier .dump trouv√© dans le dossier backups");
  process.exit(1);
}

// Trier par date (le plus r√©cent en premier)
dumpFiles.sort((a, b) => {
  const statA = fs.statSync(path.join(backupDir, a));
  const statB = fs.statSync(path.join(backupDir, b));
  return statB.mtime - statA.mtime;
});

const backupFile = path.join(backupDir, dumpFiles[0]);
console.log(`üìÅ Fichier de sauvegarde le plus r√©cent: ${dumpFiles[0]}`);

// V√©rifier que le fichier existe
if (!fs.existsSync(backupFile)) {
  console.error("‚ùå Fichier de sauvegarde introuvable:", backupFile);
  process.exit(1);
}

console.log("‚úÖ Fichier de sauvegarde trouv√©");

// Lire les variables d'environnement
console.log("\nüîç Lecture des variables d'environnement...");
const envPath = path.join(__dirname, "..", ".env");

if (!fs.existsSync(envPath)) {
  console.error("‚ùå Fichier .env introuvable");
  process.exit(1);
}

const envContent = fs.readFileSync(envPath, "utf8");
const dbUrlMatch =
  envContent.match(/DATABASE_URL=(.+)/) || envContent.match(/DIRECT_URL=(.+)/);

if (!dbUrlMatch) {
  console.error("‚ùå DATABASE_URL ou DIRECT_URL non trouv√©e dans .env");
  console.log("Contenu du fichier .env:");
  console.log(envContent);
  process.exit(1);
}

const dbUrl = dbUrlMatch[1].replace(/['"]/g, "").trim();

// Nettoyer l'URL Supabase des param√®tres probl√©matiques
let cleanDbUrl = dbUrl;
const isSupabaseRaw = dbUrl.includes("supabase") || dbUrl.includes("pooler");

if (isSupabaseRaw) {
  // Supprimer les param√®tres de query qui causent des probl√®mes avec psql
  cleanDbUrl = dbUrl.replace(/\?.*$/, "");
  console.log("üßπ URL nettoy√©e pour Supabase");
}

console.log("‚úÖ URL de base de donn√©es trouv√©e");

// D√©tecter Supabase
const isSupabase =
  cleanDbUrl.includes("supabase") || cleanDbUrl.includes("pooler");
console.log(
  `üîç Type de base: ${isSupabase ? "Supabase" : "PostgreSQL standard"}`
);

console.log("\nüßπ V√©rification de l'√©tat actuel de la base...");

try {
  // V√©rifier les tables existantes
  const checkCommand = `psql "${cleanDbUrl}" -c "SELECT COUNT(*) as table_count FROM information_schema.tables WHERE table_schema = 'public';"`;
  const result = execSync(checkCommand, { encoding: "utf8" });
  const tableCount = result.split("\n")[2]?.trim() || "0";
  console.log(`üìä Tables actuelles: ${tableCount}`);

  if (parseInt(tableCount) > 0) {
    console.log(
      "‚ö†Ô∏è  La base contient d√©j√† des tables. Continuer la restauration ?"
    );
  }
} catch (error) {
  console.warn("‚ö†Ô∏è  Impossible de v√©rifier l'√©tat actuel:", error.message);
}

console.log("\nüßπ Nettoyage pr√©alable de la base...");

// Supprimer tous les objets utilisateur existants - approche plus compl√®te
const cleanupCommands = [
  // Supprimer d'abord les politiques RLS
  `psql "${cleanDbUrl}" -c "DROP POLICY IF EXISTS \\"Allow users select own profile\\" ON public.profiles CASCADE;"`,
  `psql "${cleanDbUrl}" -c "DROP POLICY IF EXISTS \\"Allow users update own profile\\" ON public.profiles CASCADE;"`,
  `psql "${cleanDbUrl}" -c "DROP POLICY IF EXISTS \\"Allow authenticated users to read chapters\\" ON public.Chapter CASCADE;"`,
  `psql "${cleanDbUrl}" -c "DROP POLICY IF EXISTS \\"Allow authenticated users to read hadiths\\" ON public.Hadith CASCADE;"`,

  // Supprimer les tables (dans l'ordre inverse des d√©pendances)
  `psql "${cleanDbUrl}" -c "DROP TABLE IF EXISTS public.\\"HadithTransmitter\\" CASCADE;"`,
  `psql "${cleanDbUrl}" -c "DROP TABLE IF EXISTS public.\\"Hadith\\" CASCADE;"`,
  `psql "${cleanDbUrl}" -c "DROP TABLE IF EXISTS public.\\"Chapter\\" CASCADE;"`,
  `psql "${cleanDbUrl}" -c "DROP TABLE IF EXISTS public.\\"Transmitter\\" CASCADE;"`,
  `psql "${cleanDbUrl}" -c "DROP TABLE IF EXISTS public.\\"Sahaba\\" CASCADE;"`,
  `psql "${cleanDbUrl}" -c "DROP TABLE IF EXISTS public.\\"profiles\\" CASCADE;"`,
  `psql "${cleanDbUrl}" -c "DROP TABLE IF EXISTS public.\\"prisma_migrations\\" CASCADE;"`,

  // Supprimer explicitement les tables probl√©matiques
  `psql "${cleanDbUrl}" -c "DROP TABLE IF EXISTS public.\\\"_HadithToSahaba\\\" CASCADE;"`,
  `psql "${cleanDbUrl}" -c "DROP TABLE IF EXISTS public.\\\"_prisma_migrations\\\" CASCADE;"`,

  // Supprimer les types enum
  `psql "${cleanDbUrl}" -c "DROP TYPE IF EXISTS public.\\"Role\\" CASCADE;"`,

  // Nettoyer toutes les tables restantes dans le sch√©ma public
  `psql "${cleanDbUrl}" -c "
    DO \$\$
    DECLARE
      table_name TEXT;
    BEGIN
      FOR table_name IN
        SELECT tablename
        FROM pg_tables
        WHERE schemaname = 'public'
        AND tablename NOT LIKE 'pg_%'
        AND tablename NOT LIKE 'sql_%'
      LOOP
        EXECUTE 'DROP TABLE IF EXISTS public.\\\"' || table_name || '\\\" CASCADE;';
      END LOOP;
    END
    \$\$;
  "`,
];

for (const cmd of cleanupCommands) {
  try {
    execSync(cmd, { stdio: "pipe" });
    console.log("‚úÖ Objet nettoy√©");
  } catch (error) {
    // Ignorer les erreurs de nettoyage
    console.log("‚ÑπÔ∏è  Objet d√©j√† nettoy√© ou inexistant");
  }
}

console.log("‚úÖ Nettoyage termin√©");

console.log("\nüìä √âtape 2: Restauration compl√®te...");

// Commande de restauration compl√®te (structure + donn√©es)
const restoreCommand = [
  "pg_restore",
  `--dbname="${cleanDbUrl}"`,
  "--no-owner",
  "--no-privileges",
  "--exit-on-error",
  "--verbose",
  "--schema=public",
  `"${backupFile}"`,
].join(" ");

console.log(
  `Commande: pg_restore "***" "${path.basename(backupFile)}" --schema=public`
);

console.log(`Commande: pg_restore "***" "${path.basename(backupFile)}"`);

try {
  console.log("\n‚è≥ Restauration en cours... (cela peut prendre du temps)");
  execSync(restoreCommand, {
    stdio: "inherit",
    cwd: process.cwd(),
    maxBuffer: 1024 * 1024 * 50, // 50MB buffer
  });

  console.log("\n‚úÖ Restauration termin√©e avec succ√®s!");

  console.log("\nÔøΩ √âtape 3: Correction des politiques RLS...");

  // Commandes SQL pour corriger les r√¥les et politiques RLS
  const rlsFixCommands = [
    `psql "${cleanDbUrl}" -c "BEGIN;"`,
    `psql "${cleanDbUrl}" -c "ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;"`,
    `psql "${cleanDbUrl}" -c "ALTER TABLE public.profiles NO FORCE ROW LEVEL SECURITY;"`,
    `psql "${cleanDbUrl}" -c "
      DO \$\$
      DECLARE
        r RECORD;
      BEGIN
        FOR r IN SELECT policyname FROM pg_policies WHERE schemaname='public' AND tablename='profiles' LOOP
          EXECUTE format('DROP POLICY IF EXISTS %I ON public.profiles', r.policyname);
        END LOOP;
      END
      \$\$;
    "`,
    `psql "${cleanDbUrl}" -c "
      CREATE POLICY \\"Allow users select own profile\\"
        ON public.profiles
        FOR SELECT
        TO authenticated
        USING (id::text = auth.uid()::text);
    "`,
    `psql "${cleanDbUrl}" -c "GRANT SELECT ON public.profiles TO authenticated;"`,
    `psql "${cleanDbUrl}" -c "REVOKE SELECT ON public.profiles FROM anon;"`,
    `psql "${cleanDbUrl}" -c "GRANT SELECT, INSERT, UPDATE, DELETE ON public.profiles TO service_role;"`,
    `psql "${cleanDbUrl}" -c "COMMIT;"`,
  ];

  console.log("üîí Configuration des politiques RLS...");

  for (const cmd of rlsFixCommands) {
    try {
      execSync(cmd, { stdio: "pipe" });
      console.log("‚úÖ Politique RLS configur√©e");
    } catch (error) {
      console.warn("‚ö†Ô∏è Erreur lors de la configuration RLS:", error.message);
    }
  }

  console.log("‚úÖ Politiques RLS corrig√©es");

  console.log("\nüéâ Restauration termin√©e!");
  console.log(
    "üîÑ Vous pouvez maintenant acc√©der √† l'admin de votre application."
  );
} catch (error) {
  console.error("\n‚ùå Erreur lors de la restauration:");
  console.error(error.message);

  if (error.message.includes("event trigger")) {
    console.log("\nüí° Conseil: Cette erreur est normale avec Supabase.");
    console.log(
      "   Les objets syst√®me sont prot√©g√©s et ne peuvent pas √™tre modifi√©s."
    );
  }

  if (error.message.includes("already exists")) {
    console.log("\nüí° Conseil: Certaines tables existent d√©j√†.");
    console.log("   Utilisez --clean si vous voulez les remplacer.");
  }

  process.exit(1);
}
