datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

/**
 * Authentication models
 */
enum Role {
  USER
  ADMIN
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          Role            @default(USER)
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

/**
 * Hadith models
 */
model Hadith {
  id                 String              @id @default(cuid())
  numero             Int                 @unique
  matn_fr            String
  matn_ar            String
  chapterId          String
  narratorId         String
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  narrator           Narrator            @relation(fields: [narratorId], references: [id])
  chapter            Chapter             @relation(fields: [chapterId], references: [id])
  hadithTransmitters HadithTransmitter[]
  mentionedSahabas   Sahaba[]            @relation("HadithToSahaba")

  // Optimized indexes for PostgreSQL
  @@index([chapterId])
  @@index([narratorId])
  @@index([numero])
  // Composite indexes for complex queries
  @@index([chapterId, numero])
  @@index([narratorId, numero])
  // Text search indexes - will be created manually in migration
  @@index([matn_fr])
  @@index([matn_ar])
}

model Chapter {
  id         String   @id @default(cuid())
  index      Int      @unique
  name       String   @unique
  slug       String   @unique
  nameArabic String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  hadiths    Hadith[]

  // Optimized indexes for search
  @@index([name])
  @@index([slug])
  @@index([index])
}

model Narrator {
  id              String   @id @default(cuid())
  name            String   @unique
  slug            String   @unique
  nameArabic      String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  narratedHadiths Hadith[]

  // Optimized indexes for search
  @@index([name])
  @@index([slug])
}

model Sahaba {
  id                 String   @id @default(cuid())
  name               String   @unique
  slug               String   @unique
  nameArabic         String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  mentionedInHadiths Hadith[] @relation("HadithToSahaba")

  // Optimized indexes for search
  @@index([name])
  @@index([slug])
}

model Transmitter {
  id                 String              @id @default(cuid())
  name               String              @unique
  slug               String              @unique
  nameArabic         String?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  hadithTransmitters HadithTransmitter[]

  // Optimized indexes for search
  @@index([name])
  @@index([slug])
}

model HadithTransmitter {
  id            String      @id @default(cuid())
  hadithId      String
  transmitterId String
  order         Int
  transmitter   Transmitter @relation(fields: [transmitterId], references: [id], onDelete: Cascade)
  hadith        Hadith      @relation(fields: [hadithId], references: [id], onDelete: Cascade)

  @@unique([hadithId, transmitterId])
  @@unique([hadithId, order])
  @@index([hadithId])
  @@index([transmitterId])
}
